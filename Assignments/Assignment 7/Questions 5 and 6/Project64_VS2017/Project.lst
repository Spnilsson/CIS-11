Microsoft (R) Macro Assembler (x64) Version 14.12.25835.0   05/02/18 11:21:23
main.asm						     Page 1 - 1


				ExitProcess proto
				Crlf proto
				ReadString proto
				Str_compare proto
				WriteString proto
				WriteHex64 proto

 00000000			.data
 00000000 43 68 6F 6F 73	menu0 BYTE "Choose an option:",0
	   65 20 61 6E 20
	   6F 70 74 69 6F
	   6E 3A 00
 00000012 31 2E 20 78 20	menu1 BYTE "1. x AND y",0
	   41 4E 44 20 79
	   00
 0000001D 32 2E 20 78 20	menu2 BYTE "2. x OR y",0
	   4F 52 20 79 00
 00000027 33 2E 20 4E 4F	menu3 BYTE "3. NOT x",0
	   54 20 78 00
 00000030 34 2E 20 78 20	menu4 BYTE "4. x XOR y",0
	   58 4F 52 20 79
	   00
 0000003B 35 2E 20 45 78	menu5 BYTE "5. Exit",0
	   69 74 00
 00000043			entry QWORD "0"
	   0000000000000030
 0000004B			answer1 QWORD "1"
	   0000000000000031
 00000053			answer2 QWORD "2"
	   0000000000000032
 0000005B			answer3 QWORD "3"
	   0000000000000033
 00000063			answer4 QWORD "4"
	   0000000000000034

 0000006B 50 6C 65 61 73	twohexmenu BYTE "Please enter two hexadecimal integers:",0
	   65 20 65 6E 74
	   65 72 20 74 77
	   6F 20 68 65 78
	   61 64 65 63 69
	   6D 61 6C 20 69
	   6E 74 65 67 65
	   72 73 3A 00
 00000092 50 6C 65 61 73	onehexmenu BYTE "Please enter a hexadecimal integer:",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   68 65 78 61 64
	   65 63 69 6D 61
	   6C 20 69 6E 74
	   65 67 65 72 3A
	   00

 000000B6			hexentry1 QWORD "0"
	   0000000000000030
 000000BE			hexentry2 QWORD "0"
	   0000000000000030


 00000000			.code
 00000000			main proc
					
 00000000  48/ BA			mov rdx,OFFSET menu0		;outputs the menu options
	   0000000000000000 R
 0000000A  E8 00000000 E		call WriteString
 0000000F  E8 00000000 E		call Crlf

 00000014  48/ BA			mov rdx,OFFSET menu1
	   0000000000000012 R
 0000001E  E8 00000000 E		call WriteString
 00000023  E8 00000000 E		call Crlf
					
 00000028  48/ BA			mov rdx,OFFSET menu2
	   000000000000001D R
 00000032  E8 00000000 E		call WriteString
 00000037  E8 00000000 E		call Crlf
					
 0000003C  48/ BA			mov rdx,OFFSET menu3
	   0000000000000027 R
 00000046  E8 00000000 E		call WriteString
 0000004B  E8 00000000 E		call Crlf
					
 00000050  48/ BA			mov rdx,OFFSET menu4
	   0000000000000030 R
 0000005A  E8 00000000 E		call WriteString
 0000005F  E8 00000000 E		call Crlf
					
 00000064  48/ BA			mov rdx,OFFSET menu5
	   000000000000003B R
 0000006E  E8 00000000 E		call WriteString
 00000073  E8 00000000 E		call Crlf
						
 00000078  48/ C7 C1			mov rcx,2				
	   00000002
 0000007F  48/ BA			mov rdx,OFFSET entry
	   0000000000000043 R
 00000089  E8 00000000 E		call ReadString
					
 0000008E  48/ 8B 35			mov rsi,[entry]			;checks to see is the entry = 1 and if so jumps to it
	   00000043 R
 00000095  48/ 8B 3D			mov rdi,[answer1]
	   0000004B R
 0000009C  E8 00000000 E		call Str_compare
 000000A1  74 44			jz c1
					
 000000A3  48/ 8B 35			mov rsi,[entry]			;checks to see is the entry = 2 and if so jumps to it
	   00000043 R
 000000AA  48/ 8B 3D			mov rdi,[answer2]
	   00000053 R
 000000B1  E8 00000000 E		call Str_compare
 000000B6  74 36			jz c2
					
 000000B8  48/ 8B 35			mov rsi,[entry]			;checks to see is the entry = 3 and if so jumps to it
	   00000043 R
 000000BF  48/ 8B 3D			mov rdi,[answer3]
	   0000005B R
 000000C6  E8 00000000 E		call Str_compare
 000000CB  74 28			jz c3
					
 000000CD  48/ 8B 35			mov rsi,[entry]			;checks to see is the entry = 4 and if so jumps to it
	   00000043 R
 000000D4  48/ 8B 3D			mov rdi,[answer4]
	   00000063 R
 000000DB  E8 00000000 E		call Str_compare
 000000E0  74 1A			jz c4

 000000E2  E8 00000000 E		call ExitProcess

 000000E7				c1:
 000000E7  E8 00000017			call op1
						
 000000EC  E2 F9			loop c1

 000000EE				c2:
 000000EE  E8 00000068			call op2
					
 000000F3  E2 F9			loop c2

 000000F5				c3:
 000000F5  E8 000000B9			call op3
					
 000000FA  E2 F9			loop c3

 000000FC				c4:
 000000FC  E8 000000F0			call op4

 00000101  E2 F9			loop c4
					

 00000103			main endp

 00000103			op1 proc
 00000103  48/ BA			mov rdx,OFFSET twohexmenu
	   000000000000006B R
 0000010D  E8 00000000 E		call WriteString
 00000112  E8 00000000 E		call Crlf

 00000117  48/ C7 C1			mov rcx,3				
	   00000003
 0000011E  48/ BA			mov rdx,OFFSET hexentry1
	   00000000000000B6 R
 00000128  E8 00000000 E		call ReadString

 0000012D  48/ C7 C1			mov rcx,3
	   00000003
 00000134  48/ BA			mov rdx,OFFSET hexentry2
	   00000000000000BE R
 0000013E  E8 00000000 E		call ReadString

 00000143  48/ 8B 05			mov rax,[hexentry1]
	   000000B6 R

 0000014A  48/ 23 05			AND rax,hexentry2
	   000000BE R
 00000151  E8 00000000 E		call WriteHex64

 00000156  E9 FFFFFEA5			jmp main
 0000015B			op1 endp

 0000015B			op2 proc
 0000015B  48/ BA			mov rdx,OFFSET twohexmenu
	   000000000000006B R
 00000165  E8 00000000 E		call WriteString
 0000016A  E8 00000000 E		call Crlf

 0000016F  48/ C7 C1			mov rcx,3				
	   00000003
 00000176  48/ BA			mov rdx,OFFSET hexentry1
	   00000000000000B6 R
 00000180  E8 00000000 E		call ReadString

 00000185  48/ C7 C1			mov rcx,3
	   00000003
 0000018C  48/ BA			mov rdx,OFFSET hexentry2
	   00000000000000BE R
 00000196  E8 00000000 E		call ReadString

 0000019B  48/ 8B 05			mov rax,[hexentry1]
	   000000B6 R

 000001A2  48/ 0B 05			OR rax,hexentry2
	   000000BE R
 000001A9  E8 00000000 E		call WriteHex64

 000001AE  E9 FFFFFE4D			jmp main
 000001B3			op2 endp

 000001B3			op3 proc
 000001B3  48/ BA			mov rdx,OFFSET onehexmenu
	   0000000000000092 R
 000001BD  E8 00000000 E		call WriteString
 000001C2  E8 00000000 E		call Crlf

 000001C7  48/ C7 C1			mov rcx,3				
	   00000003
 000001CE  48/ BA			mov rdx,OFFSET hexentry1
	   00000000000000B6 R
 000001D8  E8 00000000 E		call ReadString

 000001DD  48/ 8B 05			MOV rax,[hexentry1]
	   000000B6 R

 000001E4  48/ F7 D0			NOT rax
 000001E7  E8 00000000 E		call WriteHex64

 000001EC  E9 FFFFFE0F			jmp main
 000001F1			op3 endp

 000001F1			op4 proc
 000001F1  48/ BA			mov rdx,OFFSET twohexmenu
	   000000000000006B R
 000001FB  E8 00000000 E		call WriteString
 00000200  E8 00000000 E		call Crlf

 00000205  48/ C7 C1			mov rcx,3				
	   00000003
 0000020C  48/ BA			mov rdx,OFFSET hexentry1
	   00000000000000B6 R
 00000216  E8 00000000 E		call ReadString

 0000021B  48/ C7 C1			mov rcx,3
	   00000003
 00000222  48/ BA			mov rdx,OFFSET hexentry2
	   00000000000000BE R
 0000022C  E8 00000000 E		call ReadString

 00000231  48/ 8B 05			mov rax,[hexentry1]
	   000000B6 R

 00000238  48/ 33 05			XOR rax,hexentry2
	   000000BE R
 0000023F  E8 00000000 E		call WriteHex64


 00000244  E9 FFFFFDB7			jmp main
 00000249			op4 endp


				end
Microsoft (R) Macro Assembler (x64) Version 14.12.25835.0   05/02/18 11:21:23
main.asm						     Symbols 2 - 1




Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

Crlf . . . . . . . . . . . . . .	P 	 00000000 Length= 00000000 External
ExitProcess  . . . . . . . . . .	P 	 00000000 Length= 00000000 External
ReadString . . . . . . . . . . .	P 	 00000000 Length= 00000000 External
Str_compare  . . . . . . . . . .	P 	 00000000 Length= 00000000 External
WriteHex64 . . . . . . . . . . .	P 	 00000000 Length= 00000000 External
WriteString  . . . . . . . . . .	P 	 00000000 Length= 00000000 External
main . . . . . . . . . . . . . .	P 	 00000000 _TEXT	Length= 00000103 Public
  c1 . . . . . . . . . . . . . .	L 	 000000E7 _TEXT	
  c2 . . . . . . . . . . . . . .	L 	 000000EE _TEXT	
  c3 . . . . . . . . . . . . . .	L 	 000000F5 _TEXT	
  c4 . . . . . . . . . . . . . .	L 	 000000FC _TEXT	
op1  . . . . . . . . . . . . . .	P 	 00000103 _TEXT	Length= 00000058 Public
op2  . . . . . . . . . . . . . .	P 	 0000015B _TEXT	Length= 00000058 Public
op3  . . . . . . . . . . . . . .	P 	 000001B3 _TEXT	Length= 0000003E Public
op4  . . . . . . . . . . . . . .	P 	 000001F1 _TEXT	Length= 00000058 Public


Symbols:

                N a m e                 Type     Value    Attr

answer1  . . . . . . . . . . . .	QWord	 0000004B _DATA	
answer2  . . . . . . . . . . . .	QWord	 00000053 _DATA	
answer3  . . . . . . . . . . . .	QWord	 0000005B _DATA	
answer4  . . . . . . . . . . . .	QWord	 00000063 _DATA	
entry  . . . . . . . . . . . . .	QWord	 00000043 _DATA	
hexentry1  . . . . . . . . . . .	QWord	 000000B6 _DATA	
hexentry2  . . . . . . . . . . .	QWord	 000000BE _DATA	
menu0  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
menu1  . . . . . . . . . . . . .	Byte	 00000012 _DATA	
menu2  . . . . . . . . . . . . .	Byte	 0000001D _DATA	
menu3  . . . . . . . . . . . . .	Byte	 00000027 _DATA	
menu4  . . . . . . . . . . . . .	Byte	 00000030 _DATA	
menu5  . . . . . . . . . . . . .	Byte	 0000003B _DATA	
onehexmenu . . . . . . . . . . .	Byte	 00000092 _DATA	
twohexmenu . . . . . . . . . . .	Byte	 0000006B _DATA	

	   0 Warnings
	   0 Errors
