Microsoft (R) Macro Assembler (x64) Version 14.12.25835.0   05/07/18 11:43:37
main.asm						     Page 1 - 1


				ExitProcess proto
				Crlf proto
				ReadString proto
				ReadInt64 proto
				WriteString proto
				WriteHex64 proto

 00000000			.data
 00000000 43 68 6F 6F 73	menu0 BYTE "Choose an option:",0
	   65 20 61 6E 20
	   6F 70 74 69 6F
	   6E 3A 00
 00000012 31 2E 20 78 20	menu1 BYTE "1. x AND y",0
	   41 4E 44 20 79
	   00
 0000001D 32 2E 20 78 20	menu2 BYTE "2. x OR y",0
	   4F 52 20 79 00
 00000027 33 2E 20 4E 4F	menu3 BYTE "3. NOT x",0
	   54 20 78 00
 00000030 34 2E 20 78 20	menu4 BYTE "4. x XOR y",0
	   58 4F 52 20 79
	   00
 0000003B 35 2E 20 45 78	menu5 BYTE "5. Exit",0
	   69 74 00


 00000043 50 6C 65 61 73	twohexmenu BYTE "Please enter two hexadecimal integers:",0
	   65 20 65 6E 74
	   65 72 20 74 77
	   6F 20 68 65 78
	   61 64 65 63 69
	   6D 61 6C 20 69
	   6E 74 65 67 65
	   72 73 3A 00
 0000006A 50 6C 65 61 73	onehexmenu BYTE "Please enter a hexadecimal integer:",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   68 65 78 61 64
	   65 63 69 6D 61
	   6C 20 69 6E 74
	   65 67 65 72 3A
	   00

 0000008E			hexentry1 QWORD "0"
	   0000000000000030
 00000096			hexentry2 QWORD "0"
	   0000000000000030


 00000000			.code
 00000000			main proc
					
 00000000  48/ BA			mov rdx,OFFSET menu0		;outputs the menu options
	   0000000000000000 R
 0000000A  E8 00000000 E		call WriteString
 0000000F  E8 00000000 E		call Crlf

 00000014  48/ BA			mov rdx,OFFSET menu1
	   0000000000000012 R
 0000001E  E8 00000000 E		call WriteString
 00000023  E8 00000000 E		call Crlf
					
 00000028  48/ BA			mov rdx,OFFSET menu2
	   000000000000001D R
 00000032  E8 00000000 E		call WriteString
 00000037  E8 00000000 E		call Crlf
					
 0000003C  48/ BA			mov rdx,OFFSET menu3
	   0000000000000027 R
 00000046  E8 00000000 E		call WriteString
 0000004B  E8 00000000 E		call Crlf
					
 00000050  48/ BA			mov rdx,OFFSET menu4
	   0000000000000030 R
 0000005A  E8 00000000 E		call WriteString
 0000005F  E8 00000000 E		call Crlf
					
 00000064  48/ BA			mov rdx,OFFSET menu5
	   000000000000003B R
 0000006E  E8 00000000 E		call WriteString
 00000073  E8 00000000 E		call Crlf
						
 00000078  48/ C7 C0			mov rax,0				
	   00000000
 0000007F  E8 00000000 E		call ReadInt64
					
 00000084  48/ 83 F8 01			CMP rax,1			;checks to see is the entry = 1 and if so jumps to it
 00000088  74 17			je c1
					
 0000008A  48/ 83 F8 02			CMP rax,2			;checks to see is the entry = 2 and if so jumps to it
 0000008E  74 16			je c2
					
 00000090  48/ 83 F8 03			CMP rax,3			;checks to see is the entry = 3 and if so jumps to it
 00000094  74 15			je c3
					
 00000096  48/ 83 F8 04			cmp rax,4			;checks to see is the entry = 4 and if so jumps to it
 0000009A  74 14			je c4

 0000009C  E8 00000000 E		call ExitProcess

 000000A1				c1:
 000000A1  E8 0000000F			call op1

 000000A6				c2:
 000000A6  E8 00000062			call op2

 000000AB				c3:
 000000AB  E8 000000B5			call op3

 000000B0				c4:
 000000B0  E8 000000EE			call op4
					

 000000B5			main endp

 000000B5			op1 proc
 000000B5  48/ BA			mov rdx,OFFSET twohexmenu
	   0000000000000043 R
 000000BF  E8 00000000 E		call WriteString
 000000C4  E8 00000000 E		call Crlf

 000000C9  48/ C7 C1			mov rcx,3				
	   00000003
 000000D0  48/ BA			mov rdx,OFFSET hexentry1
	   000000000000008E R
 000000DA  E8 00000000 E		call ReadString

 000000DF  48/ C7 C1			mov rcx,3
	   00000003
 000000E6  48/ BA			mov rdx,OFFSET hexentry2
	   0000000000000096 R
 000000F0  E8 00000000 E		call ReadString

 000000F5  48/ 8B 05			mov rax,[hexentry1]
	   0000008E R

 000000FC  48/ 23 05			AND rax,hexentry2
	   00000096 R
 00000103  E8 00000000 E		call WriteHex64

 00000108  E9 FFFFFEF3			jmp main
 0000010D			op1 endp

 0000010D			op2 proc
 0000010D  48/ BA			mov rdx,OFFSET twohexmenu
	   0000000000000043 R
 00000117  E8 00000000 E		call WriteString
 0000011C  E8 00000000 E		call Crlf

 00000121  48/ C7 C1			mov rcx,3				
	   00000003
 00000128  48/ BA			mov rdx,OFFSET hexentry1
	   000000000000008E R
 00000132  E8 00000000 E		call ReadString

 00000137  48/ C7 C1			mov rcx,3
	   00000003
 0000013E  48/ BA			mov rdx,OFFSET hexentry2
	   0000000000000096 R
 00000148  E8 00000000 E		call ReadString

 0000014D  48/ 8B 05			mov rax,[hexentry1]
	   0000008E R

 00000154  48/ 0B 05			OR rax,hexentry2
	   00000096 R
 0000015B  E8 00000000 E		call WriteHex64

 00000160  E9 FFFFFE9B			jmp main
 00000165			op2 endp

 00000165			op3 proc
 00000165  48/ BA			mov rdx,OFFSET onehexmenu
	   000000000000006A R
 0000016F  E8 00000000 E		call WriteString
 00000174  E8 00000000 E		call Crlf

 00000179  48/ C7 C1			mov rcx,3				
	   00000003
 00000180  48/ BA			mov rdx,OFFSET hexentry1
	   000000000000008E R
 0000018A  E8 00000000 E		call ReadString

 0000018F  48/ 8B 05			MOV rax,[hexentry1]
	   0000008E R

 00000196  48/ F7 D0			NOT rax
 00000199  E8 00000000 E		call WriteHex64

 0000019E  E9 FFFFFE5D			jmp main
 000001A3			op3 endp

 000001A3			op4 proc
 000001A3  48/ BA			mov rdx,OFFSET twohexmenu
	   0000000000000043 R
 000001AD  E8 00000000 E		call WriteString
 000001B2  E8 00000000 E		call Crlf

 000001B7  48/ C7 C1			mov rcx,3				
	   00000003
 000001BE  48/ BA			mov rdx,OFFSET hexentry1
	   000000000000008E R
 000001C8  E8 00000000 E		call ReadString

 000001CD  48/ C7 C1			mov rcx,3
	   00000003
 000001D4  48/ BA			mov rdx,OFFSET hexentry2
	   0000000000000096 R
 000001DE  E8 00000000 E		call ReadString

 000001E3  48/ 8B 05			mov rax,[hexentry1]
	   0000008E R

 000001EA  48/ 33 05			XOR rax,hexentry2
	   00000096 R
 000001F1  E8 00000000 E		call WriteHex64


 000001F6  E9 FFFFFE05			jmp main
 000001FB			op4 endp


				end
Microsoft (R) Macro Assembler (x64) Version 14.12.25835.0   05/07/18 11:43:37
main.asm						     Symbols 2 - 1




Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

Crlf . . . . . . . . . . . . . .	P 	 00000000 Length= 00000000 External
ExitProcess  . . . . . . . . . .	P 	 00000000 Length= 00000000 External
ReadInt64  . . . . . . . . . . .	P 	 00000000 Length= 00000000 External
ReadString . . . . . . . . . . .	P 	 00000000 Length= 00000000 External
WriteHex64 . . . . . . . . . . .	P 	 00000000 Length= 00000000 External
WriteString  . . . . . . . . . .	P 	 00000000 Length= 00000000 External
main . . . . . . . . . . . . . .	P 	 00000000 _TEXT	Length= 000000B5 Public
  c1 . . . . . . . . . . . . . .	L 	 000000A1 _TEXT	
  c2 . . . . . . . . . . . . . .	L 	 000000A6 _TEXT	
  c3 . . . . . . . . . . . . . .	L 	 000000AB _TEXT	
  c4 . . . . . . . . . . . . . .	L 	 000000B0 _TEXT	
op1  . . . . . . . . . . . . . .	P 	 000000B5 _TEXT	Length= 00000058 Public
op2  . . . . . . . . . . . . . .	P 	 0000010D _TEXT	Length= 00000058 Public
op3  . . . . . . . . . . . . . .	P 	 00000165 _TEXT	Length= 0000003E Public
op4  . . . . . . . . . . . . . .	P 	 000001A3 _TEXT	Length= 00000058 Public


Symbols:

                N a m e                 Type     Value    Attr

hexentry1  . . . . . . . . . . .	QWord	 0000008E _DATA	
hexentry2  . . . . . . . . . . .	QWord	 00000096 _DATA	
menu0  . . . . . . . . . . . . .	Byte	 00000000 _DATA	
menu1  . . . . . . . . . . . . .	Byte	 00000012 _DATA	
menu2  . . . . . . . . . . . . .	Byte	 0000001D _DATA	
menu3  . . . . . . . . . . . . .	Byte	 00000027 _DATA	
menu4  . . . . . . . . . . . . .	Byte	 00000030 _DATA	
menu5  . . . . . . . . . . . . .	Byte	 0000003B _DATA	
onehexmenu . . . . . . . . . . .	Byte	 0000006A _DATA	
twohexmenu . . . . . . . . . . .	Byte	 00000043 _DATA	

	   0 Warnings
	   0 Errors
